# The image tagged with the 'spacy-en' suffix
ARG GPU_TAG
ARG IMAGE_BASE_NAME
ARG BASE_IMAGE_HASH
ARG BASE_BUILDER_IMAGE_HASH

FROM ${IMAGE_BASE_NAME}:base-${GPU_TAG}builder-${BASE_BUILDER_IMAGE_HASH} as builder

# copy files
COPY . /build/
COPY docker/configs/config_pretrained_embeddings_spacy_zh.yml /build/config.yml

# change working directory
WORKDIR /build

# install dependencies
RUN python -m venv /opt/venv && \
  . /opt/venv/bin/activate && pip install --no-cache-dir -U 'pip<20'
RUN . /opt/venv/bin/activate && poetry install --extras "spacy jieba" --no-dev --no-root --no-interaction

RUN . /opt/venv/bin/activate && \
  pip install wheel && \
  cd rasa_addons && \
  mkdir rasa_addons && \
  mv `\ls -1 . | grep -v -e setup.py -e rasa_addons` ./rasa_addons/ && \
  python setup.py install && \
  cd ..

RUN . /opt/venv/bin/activate && poetry build -f wheel -n && \
  pip install --no-deps dist/*.whl && \
  rm -rf dist *.egg-info

# make sure we use the virtualenv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --upgrade pip
# spacy link
RUN pip install -U spacy && \
  python -m spacy download zh_core_web_lg
#    python -m spacy link zh_core_web_lg zh

# start a new build stage
FROM ${IMAGE_BASE_NAME}:base-${GPU_TAG}${BASE_IMAGE_HASH} as runner

# copy everything from /opt
COPY --from=builder /opt/venv /opt/venv

# make sure we use the virtualenv
ENV PATH="/opt/venv/bin:$PATH"

# update permissions & change user to not run as root
WORKDIR /app
RUN chgrp -R 0 /app && chmod -R g=u /app
USER 1001

# Create a volume for temporary data
VOLUME /tmp

# change shell
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# the entry point
EXPOSE 5005
# ENTRYPOINT ["rasa"]
# CMD ["--help"]
CMD rasa run \
  $([ -n "$MODEL_PATH" ] && echo "-m $MODEL_PATH") \
  $([ -n "$AUTH_TOKEN" ] && echo "--auth-token $AUTH_TOKEN" ) \
  --enable-api --debug
